diff --git a/drivers/w1/masters/ds2482.c b/drivers/w1/masters/ds2482.c
index 62c44616d..9c1030457 100644
--- a/drivers/w1/masters/ds2482.c
+++ b/drivers/w1/masters/ds2482.c
@@ -549,6 +549,12 @@ static const struct i2c_device_id ds2482_id[] = {
 };
 MODULE_DEVICE_TABLE(i2c, ds2482_id);
 
+static const struct of_device_id ds2482_of_match[] = {
+	{ .compatible = "maxim,ds2482" },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, ds2482_of_match);
+
 static struct i2c_driver ds2482_driver = {
 	.driver = {
 		.name	= "ds2482",
diff --git a/drivers/power/supply/Kconfig b/drivers/power/supply/Kconfig
index 0bbfe6a7c..2afe964c3 100644
--- a/drivers/power/supply/Kconfig
+++ b/drivers/power/supply/Kconfig
@@ -170,6 +170,16 @@ config BATTERY_DS2782
 	  Say Y here to enable support for the DS2782/DS2786 standalone battery
 	  gas-gauge.
 
+config BATTERY_DS2784
+	tristate "DS2784 battery driver"
+	depends on HAS_IOMEM
+	select W1
+	select W1_SLAVE_DS2784
+	help
+	  If you enable this you will have the DS2784 battery driver support.
+
+	  If you are unsure, say N.
+
 config BATTERY_LEGO_EV3
 	tristate "LEGO MINDSTORMS EV3 battery"
 	depends on OF && IIO && GPIOLIB && (ARCH_DAVINCI_DA850 || COMPILE_TEST)
diff --git a/drivers/power/supply/Makefile b/drivers/power/supply/Makefile
index 0ee8653e8..e813196fb 100644
--- a/drivers/power/supply/Makefile
+++ b/drivers/power/supply/Makefile
@@ -30,6 +30,7 @@ obj-$(CONFIG_BATTERY_DS2760)	+= ds2760_battery.o
 obj-$(CONFIG_BATTERY_DS2780)	+= ds2780_battery.o
 obj-$(CONFIG_BATTERY_DS2781)	+= ds2781_battery.o
 obj-$(CONFIG_BATTERY_DS2782)	+= ds2782_battery.o
+obj-$(CONFIG_BATTERY_DS2784)	+= ds2784_battery.o
 obj-$(CONFIG_BATTERY_GAUGE_LTC2941)	+= ltc2941-battery-gauge.o
 obj-$(CONFIG_BATTERY_GOLDFISH)	+= goldfish_battery.o
 obj-$(CONFIG_BATTERY_LEGO_EV3)	+= lego_ev3_battery.o
diff --git a/drivers/power/supply/ds2784_battery.c b/drivers/power/supply/ds2784_battery.c
new file mode 100644
index 000000000..7d95032b3
--- /dev/null
+++ b/drivers/power/supply/ds2784_battery.c
@@ -0,0 +1,317 @@
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/platform_device.h>
+#include <linux/power_supply.h>
+#include <linux/w1.h>
+#include <linux/of.h>
+
+#include "../../w1/slaves/w1_ds2784.h"
+
+static const char model[] = "DS2784";
+static const char manufacturer[] = "Maxim/Dallas";
+
+struct ds2784_device_info {
+	struct device *dev;
+
+	/* DS2784 data, valid after calling ds2784_battery_read_status() */
+	char raw[DS2784_DATA_SIZE];
+	int voltage_uV;
+	int temp_C;
+	int current_uA;
+	int current_avg_uA;
+	int rem_capacity;
+	int charge_cnt;
+	bool inited;
+
+	struct power_supply *bat;
+	struct power_supply_desc bat_desc;
+	struct device *w1_dev;
+};
+
+static inline int ds2784_battery_io(struct ds2784_device_info *di,
+	char *buf, int addr, size_t count, int io)
+{
+	return w1_ds2784_io(di->w1_dev, buf, addr, count, io);
+}
+
+static int w1_ds2784_read(struct ds2784_device_info *di, char *buf,
+		int addr, size_t count)
+{
+	return ds2784_battery_io(di, buf, addr, count, 0);
+}
+
+static int ds2784_get_soc(struct ds2784_device_info *di, int *soc)
+{
+	int ret;
+
+	ret = w1_ds2784_read(di, di->raw + DS2784_REG_RARC, DS2784_REG_RARC, 1);
+
+	if (ret < 0)
+		return ret;
+
+	*soc = di->raw[DS2784_REG_RARC];
+	return 0;
+}
+
+static int ds2784_get_vcell(struct ds2784_device_info *di, int *vcell)
+{
+	int ret;
+	short n;
+
+	ret = w1_ds2784_read(di, di->raw + DS2784_REG_VOLT_MSB,
+			  DS2784_REG_VOLT_MSB, 2);
+
+	if (ret < 0)
+		return ret;
+
+	n = (((di->raw[DS2784_REG_VOLT_MSB] << 8) |
+					  (di->raw[DS2784_REG_VOLT_LSB])) >> 5);
+	*vcell = n * 4886;
+	return 0;
+}
+
+static int ds2784_get_current(struct ds2784_device_info *di, bool avg, int *ival)
+{
+	int reg = avg ? DS2784_REG_AVG_CURR_MSB : DS2784_REG_CURR_MSB;
+	short n;
+	int ret;
+	int div_rsnsp;
+
+	if (!di->raw[DS2784_REG_RSNSP]) {
+		ret = w1_ds2784_read(di, di->raw + DS2784_REG_RSNSP,
+				  DS2784_REG_RSNSP, 1);
+		if (ret < 0)
+			dev_err(di->dev, "error %d reading RSNSP\n", ret);
+	}
+	div_rsnsp = 10000 / di->raw[DS2784_REG_RSNSP];
+
+	ret = w1_ds2784_read(di, di->raw + reg, reg, 2);
+	if (ret < 0)
+		return ret;
+
+	n = ((di->raw[reg] << 8) | (di->raw[reg+1]));
+
+	*ival = div_s64((long long)n * 15625, div_rsnsp);
+	return 0;
+}
+
+static int ds2784_get_current_now(struct ds2784_device_info *di, int *i_current)
+{
+	return ds2784_get_current(di, false, i_current);
+}
+
+static int ds2784_get_current_avg(struct ds2784_device_info *di, int *i_avg)
+{
+	return ds2784_get_current(di, true, i_avg);
+}
+
+static int ds2784_get_temperature(struct ds2784_device_info *di, int *temp_now)
+{
+	short n;
+	int ret;
+
+	ret = w1_ds2784_read(di, di->raw + DS2784_REG_TEMP_MSB,
+			  DS2784_REG_TEMP_MSB, 2);
+
+	if (ret < 0)
+		return ret;
+
+	n = (((di->raw[DS2784_REG_TEMP_MSB] << 8) |
+			(di->raw[DS2784_REG_TEMP_LSB])) >> 5);
+
+	if (di->raw[DS2784_REG_TEMP_MSB] & (1 << 7))
+		n |= 0xf800;
+
+	*temp_now = (n * 10) / 8;
+	return 0;
+}
+
+static int ds2784_get_accumulated_current(struct ds2784_device_info *di, int *acc)
+{
+	int n;
+	int ret;
+	int div_rsnsp;
+
+	if (!di->raw[DS2784_REG_RSNSP]) {
+		ret = w1_ds2784_read(di, di->raw + DS2784_REG_RSNSP,
+				  DS2784_REG_RSNSP, 1);
+		if (ret < 0) {
+			dev_err(di->dev, "error %d reading RSNSP\n", ret);
+			return ret;
+		}
+	}
+	div_rsnsp = 100 / di->raw[DS2784_REG_RSNSP];
+
+	ret = w1_ds2784_read(di, di->raw + DS2784_REG_ACCUMULATE_CURR_MSB,
+			  DS2784_REG_ACCUMULATE_CURR_MSB, 2);
+
+	if (ret < 0)
+		return ret;
+
+	n = (di->raw[DS2784_REG_ACCUMULATE_CURR_MSB] << 8) |
+		di->raw[DS2784_REG_ACCUMULATE_CURR_LSB];
+	*acc = n * 625 / div_rsnsp;
+
+	return 0;
+}
+
+static int ds2784_battery_read_status(struct ds2784_device_info *di)
+{
+	int ret = 0;
+
+	if (!di->inited)
+		return -ENODEV;
+
+	ret = ds2784_get_vcell(di, &di->voltage_uV);
+	if (ret < 0)
+	    goto out;
+
+	ret = ds2784_get_temperature(di, &di->temp_C);
+	if (ret < 0)
+	    goto out;
+
+	ret = ds2784_get_current_now(di, &di->current_uA);
+	if (ret < 0)
+	    goto out;
+
+	ret = ds2784_get_current_avg(di, &di->current_avg_uA);
+	if (ret < 0)
+	    goto out;
+
+	ret = ds2784_get_soc(di, &di->rem_capacity);
+	if (ret < 0)
+	    goto out;
+
+	ret = ds2784_get_accumulated_current(di, &di->charge_cnt);
+
+out:
+	 return ret;
+}
+
+static int ds2784_get_property(struct power_supply *psy,
+	enum power_supply_property psp,
+	union power_supply_propval *val)
+{
+	int ret = 0;
+	struct ds2784_device_info *di = power_supply_get_drvdata(psy);
+
+	if (!di->inited)
+		return -ENODEV;
+
+	ret = ds2784_battery_read_status(di);
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
+		val->intval = di->voltage_uV;
+		break;
+	case POWER_SUPPLY_PROP_TEMP:
+		val->intval = di->temp_C;
+		break;
+	case POWER_SUPPLY_PROP_MODEL_NAME:
+		val->strval = model;
+		break;
+	case POWER_SUPPLY_PROP_MANUFACTURER:
+		val->strval = manufacturer;
+		break;
+	case POWER_SUPPLY_PROP_CURRENT_NOW:
+		val->intval = di->current_uA;
+		break;
+	case POWER_SUPPLY_PROP_CURRENT_AVG:
+		val->intval = di->current_avg_uA;
+		break;
+	case POWER_SUPPLY_PROP_CAPACITY:
+		val->intval = di->rem_capacity;
+		break;
+	case POWER_SUPPLY_PROP_CHARGE_COUNTER:
+		val->intval = di->charge_cnt;
+		break;
+	default:
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+static enum power_supply_property ds2784_props[] = {
+	POWER_SUPPLY_PROP_VOLTAGE_NOW,
+	POWER_SUPPLY_PROP_TEMP,
+	POWER_SUPPLY_PROP_MODEL_NAME,
+	POWER_SUPPLY_PROP_MANUFACTURER,
+	POWER_SUPPLY_PROP_CURRENT_NOW,
+	POWER_SUPPLY_PROP_CURRENT_AVG,
+	POWER_SUPPLY_PROP_CAPACITY,
+	POWER_SUPPLY_PROP_CHARGE_COUNTER,
+};
+
+static int ds2784_battery_probe(struct platform_device *pdev)
+{
+	struct power_supply_config psy_cfg = {};
+	struct ds2784_device_info *di;
+	struct device *dev = &pdev->dev;
+	int retval = 0;
+
+	di = devm_kzalloc(dev, sizeof(*di), GFP_KERNEL);
+	if (!di) {
+		retval = -ENOMEM;
+		goto out;
+	}
+
+	platform_set_drvdata(pdev, di);
+
+	di->dev						= dev;
+	di->w1_dev					= dev->parent;
+	di->bat_desc.name 			= devm_kasprintf(dev, GFP_KERNEL, "ds2784-battery.%d", dev->id);
+	di->bat_desc.type			= POWER_SUPPLY_TYPE_BATTERY;
+	di->bat_desc.properties		= ds2784_props;
+	di->bat_desc.num_properties	= ARRAY_SIZE(ds2784_props);
+	di->bat_desc.get_property	= ds2784_get_property;
+
+	psy_cfg.drv_data = di;
+	if (dev->of_node)
+		psy_cfg.of_node = dev->of_node;
+
+	di->inited = true;
+	ds2784_battery_read_status(di);
+
+	di->bat = power_supply_register(dev, &di->bat_desc, &psy_cfg);
+	if (IS_ERR(di->bat)) {
+		dev_err(di->dev, "failed to register battery\n");
+		retval = PTR_ERR(di->bat);
+		goto out;
+	}
+
+out:
+	return retval;
+}
+
+static int ds2784_battery_remove(struct platform_device *pdev)
+{
+	struct ds2784_device_info *di = platform_get_drvdata(pdev);
+
+	power_supply_unregister(di->bat);
+
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id ds2784_of_match[] = {
+	{ .compatible = "maxim,ds2784" },
+	{}
+};
+MODULE_DEVICE_TABLE(of, ds2784_of_match);
+#endif
+
+static struct platform_driver ds2784_battery_driver = {
+	.driver = {
+		.name = "ds2784-battery",
+	},
+	.probe	= ds2784_battery_probe,
+	.remove	= ds2784_battery_remove,
+};
+module_platform_driver(ds2784_battery_driver);
+
+
+MODULE_AUTHOR("Samsung");
+MODULE_DESCRIPTION("Maxim/Dallas DS2784 Stand-Alone Fuel Gauge IC driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:ds2784-battery");
diff --git a/drivers/w1/slaves/Kconfig b/drivers/w1/slaves/Kconfig
index 687753889..ae37c9cd3 100644
--- a/drivers/w1/slaves/Kconfig
+++ b/drivers/w1/slaves/Kconfig
@@ -140,6 +140,18 @@ config W1_SLAVE_DS2781
 
 	  If you are unsure, say N.
 
+config W1_SLAVE_DS2784
+	tristate "Dallas 2784 battery monitor chip"
+	help
+	  If you enable this you will have the DS2784 battery monitor
+	  chip support.
+
+	  The battery monitor chip is used in many batteries/devices
+	  as the one who is responsible for charging/discharging/monitoring
+	  Li+ batteries.
+
+	  If you are unsure, say N.
+
 config W1_SLAVE_DS28E04
 	tristate "4096-Bit Addressable 1-Wire EEPROM with PIO (DS28E04-100)"
 	select CRC16
diff --git a/drivers/w1/slaves/Makefile b/drivers/w1/slaves/Makefile
index 278bcf2a9..d1a8d8488 100644
--- a/drivers/w1/slaves/Makefile
+++ b/drivers/w1/slaves/Makefile
@@ -18,5 +18,6 @@ obj-$(CONFIG_W1_SLAVE_DS2438)	+= w1_ds2438.o
 obj-$(CONFIG_W1_SLAVE_DS250X)	+= w1_ds250x.o
 obj-$(CONFIG_W1_SLAVE_DS2780)	+= w1_ds2780.o
 obj-$(CONFIG_W1_SLAVE_DS2781)	+= w1_ds2781.o
+obj-$(CONFIG_W1_SLAVE_DS2784)	+= w1_ds2784.o
 obj-$(CONFIG_W1_SLAVE_DS28E04)	+= w1_ds28e04.o
 obj-$(CONFIG_W1_SLAVE_DS28E17)	+= w1_ds28e17.o
diff --git a/drivers/w1/slaves/w1_ds2784.c b/drivers/w1/slaves/w1_ds2784.c
new file mode 100644
index 000000000..d9279f3f4
--- /dev/null
+++ b/drivers/w1/slaves/w1_ds2784.c
@@ -0,0 +1,137 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * 1-Wire implementation for the ds2784 chip
+ *
+ * Based on w1-ds2781 driver
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/types.h>
+#include <linux/platform_device.h>
+#include <linux/mutex.h>
+
+#include <linux/w1.h>
+
+#include "w1_ds2784.h"
+
+#define W1_FAMILY_DS2784	0x32
+
+
+static int w1_ds2784_do_io(struct device *dev, char *buf, int addr,
+			size_t count, int io)
+{
+	struct w1_slave *sl = container_of(dev, struct w1_slave, dev);
+
+	if (addr > DS2784_DATA_SIZE || addr < 0)
+		return 0;
+
+	count = min_t(int, count, DS2784_DATA_SIZE - addr);
+
+	if (w1_reset_select_slave(sl) == 0) {
+		if (io) {
+			w1_write_8(sl->master, W1_DS2784_WRITE_DATA);
+			w1_write_8(sl->master, addr);
+			w1_write_block(sl->master, buf, count);
+		} else {
+			w1_write_8(sl->master, W1_DS2784_READ_DATA);
+			w1_write_8(sl->master, addr);
+			count = w1_read_block(sl->master, buf, count);
+		}
+	}
+
+	return count;
+}
+
+int w1_ds2784_io(struct device *dev, char *buf, int addr, size_t count,
+			int io)
+{
+	struct w1_slave *sl = container_of(dev, struct w1_slave, dev);
+	int ret;
+
+	if (!dev)
+		return -ENODEV;
+
+	mutex_lock(&sl->master->bus_mutex);
+
+	ret = w1_ds2784_do_io(dev, buf, addr, count, io);
+
+	mutex_unlock(&sl->master->bus_mutex);
+
+	return ret;
+}
+EXPORT_SYMBOL(w1_ds2784_io);
+
+static ssize_t w1_slave_read(struct file *filp, struct kobject *kobj,
+			     struct bin_attribute *bin_attr, char *buf,
+			     loff_t off, size_t count)
+{
+	struct device *dev = kobj_to_dev(kobj);
+	return w1_ds2784_io(dev, buf, off, count, 0);
+}
+
+static BIN_ATTR_RO(w1_slave, DS2784_DATA_SIZE);
+
+static struct bin_attribute *w1_ds2784_bin_attrs[] = {
+	&bin_attr_w1_slave,
+	NULL,
+};
+
+static const struct attribute_group w1_ds2784_group = {
+	.bin_attrs = w1_ds2784_bin_attrs,
+};
+
+static const struct attribute_group *w1_ds2784_groups[] = {
+	&w1_ds2784_group,
+	NULL,
+};
+
+static int w1_ds2784_add_slave(struct w1_slave *sl)
+{
+	int ret;
+	struct platform_device *pdev;
+
+	pdev = platform_device_alloc("ds2784-battery", PLATFORM_DEVID_AUTO);
+	if (!pdev)
+		return -ENOMEM;
+	pdev->dev.parent = &sl->dev;
+
+	ret = platform_device_add(pdev);
+	if (ret)
+		goto pdev_add_failed;
+
+	dev_set_drvdata(&sl->dev, pdev);
+
+	return 0;
+
+pdev_add_failed:
+	platform_device_put(pdev);
+
+	return ret;
+}
+
+static void w1_ds2784_remove_slave(struct w1_slave *sl)
+{
+	struct platform_device *pdev = dev_get_drvdata(&sl->dev);
+
+	platform_device_unregister(pdev);
+}
+
+static const struct w1_family_ops w1_ds2784_fops = {
+	.add_slave    = w1_ds2784_add_slave,
+	.remove_slave = w1_ds2784_remove_slave,
+	.groups       = w1_ds2784_groups,
+};
+
+static struct w1_family w1_ds2784_family = {
+	.fid = W1_FAMILY_DS2784,
+	.fops = &w1_ds2784_fops,
+};
+module_w1_family(w1_ds2784_family);
+
+MODULE_AUTHOR("Samsung");
+MODULE_DESCRIPTION("1-wire Driver for Maxim/Dallas DS2784 Stand-Alone Fuel Gauge IC");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("w1-family-" __stringify(W1_FAMILY_DS2784));
+
diff --git a/drivers/w1/slaves/w1_ds2784.h b/drivers/w1/slaves/w1_ds2784.h
new file mode 100644
index 000000000..8a651f532
--- /dev/null
+++ b/drivers/w1/slaves/w1_ds2784.h
@@ -0,0 +1,87 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * 1-Wire implementation for the ds2784 chip
+ *
+ * Based on w1-ds2781 driver
+ */
+
+#ifndef _W1_DS2784_H
+#define _W1_DS2784_H
+
+#define W1_DS2784_READ_DATA				0x69
+#define W1_DS2784_WRITE_DATA			0x6C
+
+#define DS2784_REG_PORT                 0x00
+#define DS2784_REG_STS                  0x01
+#define DS2784_REG_RAAC_MSB             0x02
+#define DS2784_REG_RAAC_LSB             0x03
+#define DS2784_REG_RSAC_MSB             0x04
+#define DS2784_REG_RSAC_LSB             0x05
+#define DS2784_REG_RARC                 0x06
+#define DS2784_REG_RSRC                 0x07
+#define DS2784_REG_AVG_CURR_MSB         0x08
+#define DS2784_REG_AVG_CURR_LSB         0x09
+#define DS2784_REG_TEMP_MSB             0x0A
+#define DS2784_REG_TEMP_LSB             0x0B
+#define DS2784_REG_VOLT_MSB             0x0C
+#define DS2784_REG_VOLT_LSB             0x0D
+#define DS2784_REG_CURR_MSB             0x0E
+#define DS2784_REG_CURR_LSB             0x0F
+#define DS2784_REG_ACCUMULATE_CURR_MSB  0x10
+#define DS2784_REG_ACCUMULATE_CURR_LSB  0x11
+#define DS2784_REG_ACCUMULATE_CURR_LSB1 0x12
+#define DS2784_REG_ACCUMULATE_CURR_LSB2 0x13
+#define DS2784_REG_AGE_SCALAR           0x14
+#define DS2784_REG_SPECIALL_FEATURE     0x15
+#define DS2784_REG_FULL_MSB             0x16
+#define DS2784_REG_FULL_LSB             0x17
+#define DS2784_REG_ACTIVE_EMPTY_MSB     0x18
+#define DS2784_REG_ACTIVE_EMPTY_LSB     0x19
+#define DS2784_REG_STBY_EMPTY_MSB       0x1A
+#define DS2784_REG_STBY_EMPTY_LSB       0x1B
+#define DS2784_REG_EEPROM               0x1F
+#define DS2784_REG_MFG_GAIN_RSGAIN_MSB  0xB0
+#define DS2784_REG_MFG_GAIN_RSGAIN_LSB  0xB1
+
+#define DS2784_REG_CTRL                 0x60
+#define DS2784_REG_ACCUMULATE_BIAS      0x61
+#define DS2784_REG_AGE_CAPA_MSB         0x62
+#define DS2784_REG_AGE_CAPA_LSB         0x63
+#define DS2784_REG_CHARGE_VOLT          0x64
+#define DS2784_REG_MIN_CHARGE_CURR      0x65
+#define DS2784_REG_ACTIVE_EMPTY_VOLT    0x66
+#define DS2784_REG_ACTIVE_EMPTY_CURR    0x67
+#define DS2784_REG_ACTIVE_EMPTY_40      0x68
+#define DS2784_REG_RSNSP                0x69
+#define DS2784_REG_FULL_40_MSB          0x6A
+#define DS2784_REG_FULL_40_LSB          0x6B
+#define DS2784_REG_FULL_SEG_4_SLOPE     0x6C
+#define DS2784_REG_FULL_SEG_3_SLOPE     0x6D
+#define DS2784_REG_FULL_SEG_2_SLOPE     0x6E
+#define DS2784_REG_FULL_SEG_1_SLOPE     0x6F
+#define DS2784_REG_AE_SEG_4_SLOPE       0x70
+#define DS2784_REG_AE_SEG_3_SLOPE       0x71
+#define DS2784_REG_AE_SEG_2_SLOPE       0x72
+#define DS2784_REG_AE_SEG_1_SLOPE       0x73
+#define DS2784_REG_SE_SEG_4_SLOPE       0x74
+#define DS2784_REG_SE_SEG_3_SLOPE       0x75
+#define DS2784_REG_SE_SEG_2_SLOPE       0x76
+#define DS2784_REG_SE_SEG_1_SLOPE       0x77
+#define DS2784_REG_RSGAIN_MSB           0x78
+#define DS2784_REG_RSGAIN_LSB           0x79
+#define DS2784_REG_RSTC                 0x7A
+#define DS2784_REG_CURR_OFFSET_BIAS     0x7B
+#define DS2784_REG_TBP34                0x7C
+#define DS2784_REG_TBP23                0x7D
+#define DS2784_REG_TBP12                0x7E
+#define DS2784_REG_PROTECTOR_THRESHOLD  0x7F
+#define DS2784_REG_USER_EEPROM_20       0x20
+
+#define DS2784_DATA_SIZE		0xB2
+
+
+extern int w1_ds2784_io(struct device *dev, char *buf, int addr, size_t count,
+			int io);
+
+#endif /* !_W1_DS2781_H */
+
